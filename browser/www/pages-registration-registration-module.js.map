{"version":3,"sources":["webpack:///./src/app/pages/registration/registration.module.ts","webpack:///./src/app/pages/registration/registration.page.html","webpack:///./src/app/pages/registration/registration.page.scss","webpack:///./src/app/pages/registration/registration.page.ts"],"names":[],"mappings":"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","file":"pages-registration-registration-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { RegistrationPage } from './registration.page';\r\n\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: RegistrationPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    IonicModule,\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  declarations: [RegistrationPage]\r\n})\r\nexport class RegistrationPageModule {}\r\n","module.exports = \"<ion-header>\\r\\n  <ion-toolbar color=\\\"primary\\\">\\r\\n    <ion-title>Registration</ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content color=\\\"secondary\\\" padding>\\r\\n\\r\\n  <form [formGroup]=\\\"registrationForm\\\" class=\\\"form\\\">\\r\\n    <ion-grid>\\r\\n      <ion-row>\\r\\n        <ion-col>\\r\\n          <ion-item>\\r\\n            <ion-label position=\\\"floating\\\">Full Name</ion-label>\\r\\n            <ion-input type=\\\"text\\\" formControlName=\\\"name\\\" #name></ion-input>\\r\\n          </ion-item>\\r\\n          <div class=\\\"validation-errors\\\">\\r\\n            <ng-container *ngFor=\\\"let validation of validation_messages.name\\\">\\r\\n              <div class=\\\"error-message\\\"\\r\\n                *ngIf=\\\"registrationForm.get('name').hasError(validation.type) && (registrationForm.get('name').dirty || registrationForm.get('name').touched)\\\">\\r\\n                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\r\\n              </div>\\r\\n            </ng-container>\\r\\n          </div>\\r\\n        </ion-col>\\r\\n      </ion-row>\\r\\n      <ion-row>\\r\\n        <ion-col>\\r\\n          <ion-item>\\r\\n            <ion-label position=\\\"floating\\\">Email</ion-label>\\r\\n            <ion-input type=\\\"text\\\" formControlName=\\\"email\\\" #email></ion-input>\\r\\n          </ion-item>\\r\\n          <div class=\\\"validation-errors\\\">\\r\\n            <ng-container *ngFor=\\\"let validation of validation_messages.email\\\">\\r\\n              <div class=\\\"error-message\\\"\\r\\n                *ngIf=\\\"registrationForm.get('email').hasError(validation.type) && (registrationForm.get('email').dirty || registrationForm.get('email').touched)\\\">\\r\\n                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\r\\n              </div>\\r\\n            </ng-container>\\r\\n          </div>\\r\\n        </ion-col>\\r\\n      </ion-row>\\r\\n\\r\\n      <ion-row>\\r\\n          <ion-col>\\r\\n            <ion-item>\\r\\n              <ion-label position=\\\"floating\\\">Gender</ion-label>\\r\\n              <ion-select formControlName=\\\"gender\\\" cancelText=\\\"Cancel\\\" okText=\\\"OK\\\">\\r\\n                  <ion-select-option *ngFor=\\\"let gender of genders\\\" [value]=\\\"gender\\\">{{gender}}</ion-select-option>\\r\\n              </ion-select>\\r\\n            </ion-item>\\r\\n            <div class=\\\"validation-errors\\\">\\r\\n              <ng-container *ngFor=\\\"let validation of validation_messages.gender\\\">\\r\\n                <div class=\\\"error-message\\\"\\r\\n                  *ngIf=\\\"registrationForm.get('gender').hasError(validation.type) && (registrationForm.get('gender').dirty || registrationForm.get('gender').touched)\\\">\\r\\n                  <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\r\\n                </div>\\r\\n              </ng-container>\\r\\n            </div>\\r\\n          </ion-col>\\r\\n        </ion-row>\\r\\n\\r\\n        <ion-row>\\r\\n          <ion-col>\\r\\n            <ion-item>\\r\\n              <ion-label position=\\\"floating\\\">D.O.B</ion-label>\\r\\n              <ion-input type=\\\"text\\\" formControlName=\\\"dob\\\" #dob></ion-input>\\r\\n          \\r\\n            </ion-item>\\r\\n            <div class=\\\"validation-errors\\\">\\r\\n              <ng-container *ngFor=\\\"let validation of validation_messages.dob\\\">\\r\\n                <div class=\\\"error-message\\\"\\r\\n                  *ngIf=\\\"registrationForm.get('dob').hasError(validation.type) && (registrationForm.get('dob').dirty || registrationForm.get('dob').touched)\\\">\\r\\n                  <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\r\\n                </div>\\r\\n              </ng-container>\\r\\n            </div>\\r\\n          </ion-col>\\r\\n          \\r\\n        </ion-row>\\r\\n\\r\\n      <ion-row>\\r\\n        <ion-col>\\r\\n          <ion-item>\\r\\n            <ion-label position=\\\"floating\\\">Mobile No</ion-label>\\r\\n            <ion-input type=\\\"text\\\" formControlName=\\\"mobile\\\" #mobile></ion-input>\\r\\n          </ion-item>\\r\\n\\r\\n          <div class=\\\"validation-errors\\\">\\r\\n            <ng-container *ngFor=\\\"let validation of validation_messages.mobile\\\">\\r\\n              <div class=\\\"error-message\\\"\\r\\n                *ngIf=\\\"registrationForm.get('mobile').hasError(validation.type) && (registrationForm.get('mobile').dirty || registrationForm.get('mobile').touched)\\\">\\r\\n                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\r\\n              </div>\\r\\n            </ng-container>\\r\\n          </div>\\r\\n        </ion-col>\\r\\n\\r\\n      </ion-row>\\r\\n\\r\\n      <ion-row>\\r\\n        <ion-col>\\r\\n          <ion-item>\\r\\n            <ion-label position=\\\"floating\\\">Password</ion-label>\\r\\n            <ion-input type=\\\"text\\\" formControlName=\\\"password\\\" #password></ion-input>\\r\\n          </ion-item>\\r\\n          <div class=\\\"validation-errors\\\">\\r\\n            <ng-container *ngFor=\\\"let validation of validation_messages.password\\\">\\r\\n              <div class=\\\"error-message\\\"\\r\\n                *ngIf=\\\"registrationForm.get('password').hasError(validation.type) && (registrationForm.get('password').dirty || registrationForm.get('password').touched)\\\">\\r\\n                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\r\\n              </div>\\r\\n            </ng-container>\\r\\n          </div>\\r\\n        </ion-col>\\r\\n      </ion-row>\\r\\n    </ion-grid>\\r\\n\\r\\n    <ion-row>\\r\\n        <ion-col>\\r\\n          <ion-button button color=\\\"dark\\\" (click)=\\\"register(registrationForm.value)\\\" expand=\\\"block\\\"  [disabled]=\\\"!registrationForm.valid\\\" fill=\\\"outline\\\">\\r\\n              Register\\r\\n            <ion-icon slot=\\\"end\\\" name=\\\"create\\\"></ion-icon>\\r\\n          </ion-button>\\r\\n        </ion-col>\\r\\n      </ion-row>\\r\\n        <ion-row>\\r\\n        <ion-col>\\r\\n          <ion-button button color=\\\"dark\\\" (click)=\\\"goToLoginPage()\\\" expand=\\\"block\\\" fill=\\\"outline\\\">\\r\\n              Have an account?  Sign In\\r\\n            <ion-icon slot=\\\"end\\\" name=\\\"create\\\"></ion-icon>\\r\\n          </ion-button>\\r\\n        </ion-col>\\r\\n      </ion-row>\\r\\n  </form>\\r\\n</ion-content>\\r\\n<ion-footer class=\\\"login-footer\\\" >\\r\\n  <ion-toolbar color=\\\"dark\\\">\\r\\n    <ion-title> <a href=\\\"javascript:void(0)\\\"><span class=\\\"rightHelp\\\"><ion-icon name=\\\"help-circle\\\"></ion-icon></span></a></ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-footer>\"","module.exports = \".error-message {\\n  color: red;\\n  font-size: 14px;\\n  margin-left: 10px;\\n  margin-top: 10px; }\\n\\n.submit-btn {\\n  margin-top: 40px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvcmVnaXN0cmF0aW9uL0Q6XFxSX05fRFxcUGF5LWthcnQvc3JjXFxhcHBcXHBhZ2VzXFxyZWdpc3RyYXRpb25cXHJlZ2lzdHJhdGlvbi5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFFRSxVQUFVO0VBQ1YsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixnQkFBZ0IsRUFBQTs7QUFFbEI7RUFDSSxnQkFBZ0IsRUFBQSIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3JlZ2lzdHJhdGlvbi9yZWdpc3RyYXRpb24ucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmVycm9yLW1lc3NhZ2Vcclxue1xyXG4gIGNvbG9yOiByZWQ7XHJcbiAgZm9udC1zaXplOiAxNHB4O1xyXG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xyXG4gIG1hcmdpbi10b3A6IDEwcHg7XHJcbn1cclxuLnN1Ym1pdC1idG4ge1xyXG4gICAgbWFyZ2luLXRvcDogNDBweDtcclxuICB9XHJcbiJdfQ== */\"","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { FormGroup, FormControl, Validators, FormBuilder, ReactiveFormsModule, FormsModule} from '@angular/forms';\r\nimport { validateConfig } from '@angular/router/src/config';\r\nimport { ModalController } from '@ionic/angular';\r\n\r\n@Component({\r\n  selector: 'app-registration',\r\n  templateUrl: './registration.page.html',\r\n  styleUrls: ['./registration.page.scss'],\r\n})\r\nexport class RegistrationPage implements OnInit {\r\n\r\n  registrationForm:FormGroup;\r\n  validation_messages:any={};\r\n\r\n genders = [\r\n     'Male' ,\r\n     'Female',\r\n     'Others' ,\r\n  ];\r\n  constructor(public router:Router,public formBuilder:FormBuilder,public modalCtrl: ModalController) {\r\n\r\n    this.createForm();\r\n    this.setValidationMessages();\r\n   }\r\n\r\n   createForm =() => {\r\n\r\n    this.registrationForm = this.formBuilder.group({\r\n      name:new FormControl('',Validators.compose([\r\n        Validators.required,\r\n        Validators.pattern('[a-zA-Z ]*')\r\n      ])),\r\n      email: new FormControl('', Validators.compose([\r\n        Validators.required,\r\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\r\n      ])),     \r\n      gender:new FormControl('',Validators.required),   \r\n      dob:new FormControl('',Validators.required),     \r\n      mobile: new FormControl('',Validators.compose([\r\n        Validators.required,\r\n        Validators.minLength(10),\r\n        Validators.maxLength(10)\r\n      ])),\r\n      password: new FormControl('', Validators.compose([\r\n        Validators.required,\r\n        Validators.minLength(5),\r\n        Validators.maxLength(10)\r\n      ]))\r\n    });\r\n\r\n   }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n\r\n  \r\n  setValidationMessages = ()=> {\r\n    this.validation_messages = {\r\n      'name':[\r\n        { type: 'required', message: 'Full Name is required.' },\r\n        { type: 'pattern', message: 'Please enter a valid full name.' }\r\n      ],\r\n      'email': [\r\n        { type: 'required', message: 'Email is required.' },\r\n        { type: 'pattern', message: 'Please enter a valid email.' }\r\n      ],\r\n      'gender': [\r\n        { type: 'required', message: 'Please select your gender.' }\r\n      ],\r\n      'dob': [\r\n        { type: 'required', message: 'Please select your D.O.B.' }\r\n      ],\r\n      'mobile': [\r\n        { type: 'required', message: 'Mobile is required.' },\r\n        { type: 'minlength', message: 'Mobile num must be 10 digit.' },\r\n        { type: 'maxlength', message: 'Mobile num must be 10 digit.' }\r\n      ],\r\n      'password': [\r\n        { type: 'required', message: 'Password is required.' },\r\n        { type: 'minlength', message: 'Password must be at least 5 characters long.' },\r\n        { type: 'maxlength', message: 'Password must be at less than or equal to 10 characters long.' }\r\n      ]  \r\n    }\r\n  }\r\n\r\n  register = (form) => {\r\n    alert('test')\r\n    console.table(form)\r\n  }\r\n\r\n  goToLoginPage = ()=> {\r\n    this.router.navigateByUrl('login');\r\n  }\r\n\r\n}\r\n"],"sourceRoot":""}